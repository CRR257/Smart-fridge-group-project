{"ast":null,"code":"import userApi from '../user-api';\nimport edamamApi from '../edamam-api';\n/**\r\n * Logic for the smart-fridge app\r\n */\n\nvar logic = {\n  setUserId: function setUserId(id) {\n    this.___userId___ = id;\n  },\n  getUserId: function getUserId() {\n    return this.___userId___;\n  },\n  setUserApiToken: function setUserApiToken(token) {\n    this.___userApiToken___ = token;\n  },\n  getUserApiToken: function getUserApiToken() {\n    return this.___userApiToken___;\n  },\n  setUser: function setUser(user) {\n    this.___user___ = user;\n  },\n  getUser: function getUser() {\n    return this.___user___;\n  },\n\n  set __userId__(id) {\n    this.setUserId(id);\n  },\n\n  get __userId__() {\n    return this.getUserId();\n  },\n\n  set __userApiToken__(token) {\n    this.setUserApiToken(token);\n  },\n\n  get __userApiToken__() {\n    return this.getUserApiToken();\n  },\n\n  set __user__(user) {\n    this.setUser(user);\n  },\n\n  get __user__() {\n    return this.getUser();\n  },\n\n  get userLoggedIn() {\n    return !!this.__userId__ && !!this.__userApiToken__;\n  },\n\n  logout: function logout() {\n    this.__userId__ = null;\n    this.__userApiToken__ = null;\n    this.__user__ = null;\n  },\n\n  /**\r\n   * \r\n   * Toggles between pushing and deleting an id of a song to the array of favourite songs.\r\n   * \r\n   * @param {object} recipe\r\n   * @param {string} email \r\n   * @param {function} callback \r\n   */\n  toggleFavourite: function toggleFavourite(id, token, recipe) {\n    var favArray = [recipe];\n    this.retrieve(id, token).bind(this).then(function (user) {\n      if (!user.favourites) {\n        var favourites = {};\n        favourites.favArray = favArray;\n        logic.update(id, token, favourites);\n      } else {\n        if (user.favourites.favArray) {\n          var userFavourites = user.favourites.favArray;\n          userFavourites.push(favArray);\n          logic.update(id, token, userFavourites);\n        }\n      }\n    }); // if (user.favourites.includes(recipe)) {\n    //     const position= user.favourites.indexOf(recipe)\n    //     user.favourites.splice(position, 1)\n    // } else {\n    //     user.favourites.push(recipe)\n    // }\n  },\n\n  /**\r\n   * Calculate the total amount of daily calories that the user needs based on his params.\r\n   *\r\n   * @param {string} gender\r\n   * @param {number} height - cm\r\n   * @param {number} weight - Kg\r\n   * @param {string} birthYear - Y/M/D\r\n   * @param {string} lifeStyle\r\n   * \r\n   * @throws {Error} - On empty values\r\n   * @throws {TypeError} - On different data types\r\n   *\r\n   */\n  caloriesCounter: function caloriesCounter(gender, height, weight, birthdateString, lifeStyle) {\n    var birthdate = new Date(birthdateString);\n    var cur = new Date();\n    var diff = cur - birthdate; // This is the difference in milliseconds\n\n    var age = Math.floor(diff / 31557600000);\n    if (typeof gender !== 'string') throw TypeError(gender + ' is not a string');\n    if (!gender.trim().length) throw Error('gender cannot be empty');\n    if (typeof height !== 'number') throw TypeError(height + ' is not a number');\n    if (!(50 < height && height < 250)) throw Error(height + ' should be a number between 50 and 230');\n    if (typeof weight !== 'number') throw TypeError(weight + ' is not a number');\n    if (!(20 < weight && weight < 400)) throw Error(weight + ' should be a number between 20 and 400');\n    if (typeof birthdateString !== 'string') throw TypeError(birthdateString + ' is not a string');\n    if (!birthdateString.trim().length) throw Error('birthDate cannot be empty');\n    if (typeof age !== 'number') throw TypeError(age + ' is not a number');\n    if (!(15 < age && age < 120)) throw Error(age + ' must be between 15 and 120');\n    if (typeof lifeStyle !== 'string') throw TypeError(lifeStyle + ' is not a string');\n    if (!lifeStyle.trim().length) throw Error('lifeStyle cannot be empty');\n    var totalCalories;\n\n    if (gender === \"male\") {\n      var bmr = 10 * weight + 6.25 * height - 5 * age + 5;\n\n      if (lifeStyle === \"sedentary\") {\n        totalCalories = bmr * 1.53;\n      } else if (lifeStyle === \"active\") {\n        totalCalories = bmr * 1.76;\n      } else {\n        totalCalories = bmr * 2.25;\n      }\n    } else if (gender === \"female\") {\n      var _bmr = 10 * weight + 6.25 * height - 5 * age - 161;\n\n      if (lifeStyle === \"sedentary\") {\n        totalCalories = _bmr * 1.53;\n      } else if (lifeStyle === \"active\") {\n        totalCalories = _bmr * 1.76;\n      } else {\n        totalCalories = _bmr * 2.25;\n      }\n    }\n\n    return Math.floor(Math.round(totalCalories));\n  },\n\n  /**\r\n   * \r\n   * Registers a user.\r\n   * \r\n   * @param {string} name \r\n   * @param {string} surname \r\n   * @param {string} username \r\n   * @param {string} password \r\n   * @param {string} passwordConfirm \r\n   * @param {string} gender \r\n   * @param {number} height \r\n   * @param {number} weight \r\n   * @param {string} birthDate \r\n   * @param {string} lifeStyle \r\n   * \r\n   * @throws {Error} - When length of arguments differs from 10\r\n   */\n  register: function register(name, surname, username, password, passwordConfirm, gender, height, weight, birthDate, lifeStyle) {\n    var _this = this;\n\n    if (arguments.length < 10) throw Error('All arguments were not introduced in the function');\n    if (arguments.length > 10) throw Error('Too many arguments were introduced in the function');\n    return userApi.register(name, surname, username, password, passwordConfirm, gender, birthDate, height, weight, lifeStyle).then(function (id) {\n      _this.__userId__ = id;\n    });\n  },\n\n  /**\r\n   * \r\n   * Logs In a user.\r\n   * \r\n   * @param {string} email \r\n   * @param {string} password \r\n   * \r\n   * @throws {Error} - When length of arguments differs from 2\r\n   */\n  login: function login(email, password) {\n    var _this2 = this;\n\n    if (arguments.length < 2) throw Error('All arguments were not introduced in the function');\n    if (arguments.length > 2) throw Error('Too many arguments were introduced in the function');\n    return userApi.authenticate(email, password).then(function (_ref) {\n      var id = _ref.id,\n          token = _ref.token;\n      _this2.__userId__ = id;\n      _this2.__userApiToken__ = token;\n    });\n  },\n\n  /**\r\n   * \r\n   * Retrieves data of a user.\r\n   * \r\n   * @param {string} id \r\n   * @param {string} token \r\n   * \r\n   * @throws {Error} - When length of arguments differs from 2\r\n   */\n  retrieve: function retrieve(id, token) {\n    var _this3 = this;\n\n    if (arguments.length < 2) throw Error('All arguments were not introduced in the function');\n    if (arguments.length > 2) throw Error('Too many arguments were introduced in the function');\n    return userApi.retrieve(id, token).then(function (user) {\n      _this3.__user__ = user;\n    });\n  },\n\n  /**\r\n   * \r\n   * Updates user information.\r\n   * \r\n   * @param {string} id \r\n   * @param {string} token \r\n   * @param {object} data \r\n   * \r\n   * @throws {Error} - When length of arguments differs from 3\r\n   */\n  update: function update(id, token, data) {\n    if (arguments.length < 3) throw Error('All arguments were not introduced in the function');\n    if (arguments.length > 3) throw Error('Too many arguments were introduced in the function');\n    return userApi.update(id, token, data);\n  },\n\n  /**\r\n   * \r\n   * Removes a user from the database.\r\n   * \r\n   * @param {string} id \r\n   * @param {string} token \r\n   * @param {string} username \r\n   * @param {string} password \r\n   * \r\n   * @throws {Error} - When length of arguments differs from 4\r\n   */\n  remove: function remove(id, token, username, password) {\n    if (arguments.length < 4) throw Error('All arguments were not introduced in the function');\n    if (arguments.length > 4) throw Error('Too many arguments were introduced in the function');\n    return userApi.remove(id, token, username, password);\n  },\n\n  /**\r\n   * \r\n   * Searches for recipes with the desired query.\r\n   * \r\n   * @param {string} query \r\n   * @param {string} calories\r\n   * @param {string} diet \r\n   * @param {Array} healthArray\r\n   * \r\n   * @throws {Error} - On non-existing required params\r\n   * @throws {TypeError} - On query data type different than string\r\n   */\n  search: function search(query, calories, diet, healthArray) {\n    if (calories === undefined) throw Error('Calories range was not input');\n    if (typeof calories !== 'string') throw TypeError(calories + ' is not a string');\n    var myDiet;\n\n    if (diet) {\n      if (typeof diet !== 'string') throw TypeError(diet + ' is not a string');else if (diet === 'indifferent') {\n        myDiet = '';\n      } else {\n        myDiet = '&diet=' + diet;\n      }\n    }\n\n    var health;\n\n    if (healthArray.length > 0 || healthArray.length === undefined) {\n      if (!(healthArray instanceof Array)) throw TypeError(healthArray + ' is not an array');\n      var res = [];\n      healthArray.forEach(function (element) {\n        res.push('&health=' + element);\n      });\n      health = res.join('');\n    } else {\n      health = '';\n    }\n\n    var toCalories = \"&calories=\".concat(Math.round(calories / 2), \"-\") + calories;\n    return edamamApi.search(query, toCalories, myDiet, health);\n  },\n\n  /**\r\n   * \r\n   * find the recipeUri amound all the recipes\r\n   * \r\n   * @param {string} recipeUri \r\n   * @param {array} recipes \r\n   * \r\n   * @throws {Error} wheh recipeUri is not found in recipes\r\n   * @throws {TypeError} - On different argument types\r\n   * \r\n   * @return {Object} - Recipe found\r\n   */\n  detail: function detail(recipeUri, recipes) {\n    if (typeof recipeUri !== 'string') throw TypeError(recipeUri + ' is not a string');\n    if (!recipeUri.trim().length) throw Error(recipeUri + ' cannot be empty');\n    if (recipes.constructor !== Array) throw TypeError(recipes + ' is not an array');\n    var recipe = null;\n    recipes.find(function (element) {\n      if (element.recipe.uri === recipeUri) {\n        recipe = element.recipe;\n      }\n    });\n    if (!!recipe) return recipe;else throw Error('Details are not found');\n  },\n\n  /**\r\n   * \r\n   * @param {array} ingredientsRecipe \r\n   * @param {array} ingredientsQuery \r\n   * \r\n   * @throws {Error} wheh recipeUri is not found in recipes\r\n   * @throws {TypeError} - On different arguments types\r\n   * \r\n   * @return {object} - fridge and shopping creates\r\n   */\n  generateLists: function generateLists(ingredientsRecipe, ingredientsQuery) {\n    if (ingredientsRecipe.constructor !== Array) throw TypeError(ingredientsRecipe + ' is not an array');\n    if (ingredientsRecipe.length < 1) throw Error(ingredientsRecipe + ' cannot be empty');\n    if (ingredientsQuery.constructor !== Array) throw TypeError(ingredientsQuery + ' is not an array');\n    if (ingredientsQuery.length < 1) throw Error(ingredientsQuery + ' cannot be empty');\n    var fridge = [];\n    var shopping = [];\n    ingredientsRecipe.forEach(function (ingredientRecipe) {\n      var compare = ingredientsQuery.find(function (ingredientQuery) {\n        return ingredientRecipe.toLowerCase().includes(ingredientQuery.toLowerCase());\n      });\n      if (compare) fridge.push(ingredientRecipe);else shopping.push(ingredientRecipe);\n    });\n    return {\n      fridge: fridge,\n      shopping: shopping\n    };\n  }\n};\nexport default logic;","map":{"version":3,"sources":["C:\\Users\\lluna\\bootcamp\\collab\\los-chicotes\\skylab-bootcamp-201901\\staff\\groups\\null\\smart-fridge\\src\\logic\\index.js"],"names":["userApi","edamamApi","logic","setUserId","id","___userId___","getUserId","setUserApiToken","token","___userApiToken___","getUserApiToken","setUser","user","___user___","getUser","__userId__","__userApiToken__","__user__","userLoggedIn","logout","toggleFavourite","recipe","favArray","retrieve","bind","then","favourites","update","userFavourites","push","caloriesCounter","gender","height","weight","birthdateString","lifeStyle","birthdate","Date","cur","diff","age","Math","floor","TypeError","trim","length","Error","totalCalories","bmr","round","register","name","surname","username","password","passwordConfirm","birthDate","arguments","login","email","authenticate","data","remove","search","query","calories","diet","healthArray","undefined","myDiet","health","Array","res","forEach","element","join","toCalories","detail","recipeUri","recipes","constructor","find","uri","generateLists","ingredientsRecipe","ingredientsQuery","fridge","shopping","ingredientRecipe","compare","ingredientQuery","toLowerCase","includes"],"mappings":"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","sourcesContent":["import userApi from '../user-api'\r\nimport edamamApi from '../edamam-api'\r\n/**\r\n * Logic for the smart-fridge app\r\n */\r\nconst logic = {\r\n    setUserId(id) {\r\n        this.___userId___ = id\r\n    },\r\n\r\n    getUserId() {\r\n        return this.___userId___\r\n    },\r\n\r\n    setUserApiToken(token) {\r\n        this.___userApiToken___ = token\r\n    },\r\n\r\n    getUserApiToken() {\r\n        return this.___userApiToken___\r\n    },\r\n\r\n    setUser(user) {\r\n        this.___user___ = user\r\n    },\r\n\r\n    getUser() {\r\n        return this.___user___\r\n    },\r\n\r\n    set __userId__(id) {\r\n        this.setUserId(id)\r\n    },\r\n\r\n    get __userId__() {\r\n        return this.getUserId()\r\n    },\r\n\r\n    set __userApiToken__(token) {\r\n        this.setUserApiToken(token)\r\n    },\r\n\r\n    get __userApiToken__() {\r\n        return this.getUserApiToken()\r\n    },\r\n\r\n    set __user__(user) {\r\n        this.setUser(user)\r\n    },\r\n\r\n    get __user__() {\r\n        return this.getUser()\r\n    },\r\n\r\n    get userLoggedIn() {\r\n        return (!!this.__userId__ && !!this.__userApiToken__)\r\n    },\r\n\r\n    logout() {\r\n        this.__userId__ = null\r\n        this.__userApiToken__ = null\r\n        this.__user__ = null\r\n    },\r\n    /**\r\n     * \r\n     * Toggles between pushing and deleting an id of a song to the array of favourite songs.\r\n     * \r\n     * @param {object} recipe\r\n     * @param {string} email \r\n     * @param {function} callback \r\n     */\r\n    toggleFavourite(id, token, recipe) {\r\n\r\n        let favArray = [recipe]\r\n\r\n        this.retrieve(id, token).bind(this) \r\n            .then(user => {\r\n                if (!user.favourites) {\r\n                    let favourites = {}\r\n                    favourites.favArray = favArray\r\n                    logic.update(id, token, favourites)\r\n                } else {\r\n                    if (user.favourites.favArray) {\r\n                        let userFavourites = user.favourites.favArray\r\n                        userFavourites.push(favArray)\r\n                        logic.update(id, token, userFavourites)\r\n                    }\r\n                }\r\n            })\r\n\r\n        // if (user.favourites.includes(recipe)) {\r\n        //     const position= user.favourites.indexOf(recipe)\r\n\r\n        //     user.favourites.splice(position, 1)\r\n        // } else {\r\n        //     user.favourites.push(recipe)\r\n        // }\r\n    },\r\n    /**\r\n     * Calculate the total amount of daily calories that the user needs based on his params.\r\n     *\r\n     * @param {string} gender\r\n     * @param {number} height - cm\r\n     * @param {number} weight - Kg\r\n     * @param {string} birthYear - Y/M/D\r\n     * @param {string} lifeStyle\r\n     * \r\n     * @throws {Error} - On empty values\r\n     * @throws {TypeError} - On different data types\r\n     *\r\n     */\r\n    caloriesCounter(gender, height, weight, birthdateString, lifeStyle) { \r\n\r\n        const birthdate = new Date(birthdateString);\r\n        const cur = new Date();\r\n        const diff = cur-birthdate; // This is the difference in milliseconds\r\n        const age = Math.floor(diff/31557600000); \r\n\r\n        if (typeof gender !== 'string') throw TypeError(gender + ' is not a string')\r\n\r\n        if (!gender.trim().length) throw Error('gender cannot be empty')\r\n\r\n        if (typeof height !== 'number') throw TypeError(height + ' is not a number')\r\n\r\n        if (!(50 < height && height < 250)) throw Error(height + ' should be a number between 50 and 230')\r\n\r\n        if (typeof weight !== 'number') throw TypeError(weight + ' is not a number')\r\n\r\n        if (!(20 < weight && weight < 400)) throw Error(weight + ' should be a number between 20 and 400')\r\n \r\n        if (typeof birthdateString !== 'string') throw TypeError(birthdateString + ' is not a string')\r\n        \r\n        if (!birthdateString.trim().length) throw Error('birthDate cannot be empty')\r\n        \r\n        if (typeof age !== 'number') throw TypeError(age + ' is not a number')\r\n\r\n        if (!(15 < age && age < 120)) throw Error(age + ' must be between 15 and 120')\r\n        \r\n        if (typeof lifeStyle !== 'string') throw TypeError(lifeStyle + ' is not a string')\r\n        \r\n        if (!lifeStyle.trim().length) throw Error('lifeStyle cannot be empty')\r\n        \r\n\r\n        var totalCalories\r\n        \r\n        if(gender === \"male\"){\r\n            const bmr =  (10 * weight) + (6.25 * height) - (5 * age) + 5\r\n            \r\n            if(lifeStyle === \"sedentary\"){\r\n                totalCalories =  bmr * 1.53\r\n\r\n            }else if(lifeStyle === \"active\"){\r\n\r\n                totalCalories =  bmr * 1.76\r\n\r\n            }else{\r\n                totalCalories =  bmr * 2.25\r\n            }\r\n\r\n        }else if(gender === \"female\") {\r\n            const bmr = (10 * weight) + (6.25 * height) - (5 * age) - 161\r\n\r\n            if(lifeStyle === \"sedentary\"){\r\n\r\n                totalCalories =  bmr * 1.53\r\n\r\n            }else if(lifeStyle === \"active\"){\r\n                totalCalories =  bmr * 1.76\r\n\r\n            }else{\r\n                totalCalories =  bmr * 2.25\r\n            }\r\n        }    \r\n        return Math.floor(Math.round(totalCalories)) \r\n    },\r\n    /**\r\n     * \r\n     * Registers a user.\r\n     * \r\n     * @param {string} name \r\n     * @param {string} surname \r\n     * @param {string} username \r\n     * @param {string} password \r\n     * @param {string} passwordConfirm \r\n     * @param {string} gender \r\n     * @param {number} height \r\n     * @param {number} weight \r\n     * @param {string} birthDate \r\n     * @param {string} lifeStyle \r\n     * \r\n     * @throws {Error} - When length of arguments differs from 10\r\n     */\r\n    register(name, surname, username, password, passwordConfirm, gender, height, weight, birthDate, lifeStyle) {\r\n\r\n        if (arguments.length < 10) throw Error('All arguments were not introduced in the function')\r\n\r\n        if (arguments.length > 10) throw Error('Too many arguments were introduced in the function')\r\n\r\n        return userApi.register(name, surname, username, password, passwordConfirm, gender, birthDate, height, weight, lifeStyle)\r\n            .then(id => {\r\n                this.__userId__ = id\r\n            })\r\n    },\r\n    /**\r\n     * \r\n     * Logs In a user.\r\n     * \r\n     * @param {string} email \r\n     * @param {string} password \r\n     * \r\n     * @throws {Error} - When length of arguments differs from 2\r\n     */\r\n    login(email, password) {\r\n\r\n        if (arguments.length < 2) throw Error('All arguments were not introduced in the function')\r\n\r\n        if (arguments.length > 2) throw Error('Too many arguments were introduced in the function')\r\n\r\n        return userApi.authenticate(email, password)\r\n            .then(({ id, token }) => {\r\n                this.__userId__ = id\r\n                this.__userApiToken__ = token\r\n            })\r\n    },\r\n    /**\r\n     * \r\n     * Retrieves data of a user.\r\n     * \r\n     * @param {string} id \r\n     * @param {string} token \r\n     * \r\n     * @throws {Error} - When length of arguments differs from 2\r\n     */\r\n    retrieve(id, token) {\r\n\r\n        if (arguments.length < 2) throw Error('All arguments were not introduced in the function')\r\n\r\n        if (arguments.length > 2) throw Error('Too many arguments were introduced in the function')\r\n\r\n        return userApi.retrieve(id, token)\r\n            .then((user) => {\r\n                this.__user__ = user\r\n            })\r\n    },\r\n    /**\r\n     * \r\n     * Updates user information.\r\n     * \r\n     * @param {string} id \r\n     * @param {string} token \r\n     * @param {object} data \r\n     * \r\n     * @throws {Error} - When length of arguments differs from 3\r\n     */\r\n    update(id, token, data) {\r\n        if (arguments.length < 3) throw Error('All arguments were not introduced in the function')\r\n\r\n        if (arguments.length > 3) throw Error('Too many arguments were introduced in the function')\r\n\r\n        return userApi.update(id, token, data)\r\n    },\r\n    /**\r\n     * \r\n     * Removes a user from the database.\r\n     * \r\n     * @param {string} id \r\n     * @param {string} token \r\n     * @param {string} username \r\n     * @param {string} password \r\n     * \r\n     * @throws {Error} - When length of arguments differs from 4\r\n     */\r\n    remove(id, token, username, password) {\r\n        if (arguments.length < 4) throw Error('All arguments were not introduced in the function')\r\n\r\n        if (arguments.length > 4) throw Error('Too many arguments were introduced in the function')\r\n\r\n        return userApi.remove(id, token, username, password)\r\n    }, \r\n    /**\r\n     * \r\n     * Searches for recipes with the desired query.\r\n     * \r\n     * @param {string} query \r\n     * @param {string} calories\r\n     * @param {string} diet \r\n     * @param {Array} healthArray\r\n     * \r\n     * @throws {Error} - On non-existing required params\r\n     * @throws {TypeError} - On query data type different than string\r\n     */\r\n    search(query, calories, diet, healthArray) {\r\n\r\n        \r\n        if (calories === undefined) throw Error('Calories range was not input')\r\n        \r\n        if (typeof calories !== 'string') throw TypeError(calories + ' is not a string')\r\n\r\n        let myDiet\r\n        \r\n        if (diet) {\r\n            if (typeof diet !== 'string') throw TypeError(diet + ' is not a string')\r\n\r\n            else if (diet === 'indifferent') {\r\n                myDiet = ''\r\n            } else {\r\n                myDiet = '&diet=' + diet\r\n            }\r\n        }\r\n        \r\n        let health\r\n\r\n        if (healthArray.length > 0 || healthArray.length === undefined) {\r\n            if (!(healthArray instanceof Array)) throw TypeError(healthArray + ' is not an array')\r\n            const res = []\r\n            \r\n            healthArray.forEach(element => {\r\n                res.push('&health=' + element)\r\n            });\r\n            \r\n            health = res.join('')\r\n        } else {\r\n            health = ''\r\n        }\r\n        \r\n        const toCalories = `&calories=${Math.round(calories/2)}-` + calories\r\n\r\n        return edamamApi.search(query, toCalories, myDiet, health)\r\n    },\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * \r\n * find the recipeUri amound all the recipes\r\n * \r\n * @param {string} recipeUri \r\n * @param {array} recipes \r\n * \r\n * @throws {Error} wheh recipeUri is not found in recipes\r\n * @throws {TypeError} - On different argument types\r\n * \r\n * @return {Object} - Recipe found\r\n */\r\n    detail(recipeUri, recipes){\r\n\r\n        if (typeof recipeUri !== 'string') throw TypeError(recipeUri + ' is not a string')\r\n\r\n        if (!recipeUri.trim().length) throw Error(recipeUri + ' cannot be empty')\r\n\r\n        if (recipes.constructor !== Array) throw TypeError(recipes + ' is not an array')\r\n\r\n        let recipe=null\r\n        \r\n        recipes.find( element => {\r\n            if(element.recipe.uri===recipeUri){\r\n                recipe=element.recipe\r\n            }\r\n        })\r\n        if (!!recipe) return recipe\r\n        else throw Error('Details are not found')\r\n    },\r\n\r\n  /**\r\n   * \r\n   * @param {array} ingredientsRecipe \r\n   * @param {array} ingredientsQuery \r\n   * \r\n   * @throws {Error} wheh recipeUri is not found in recipes\r\n   * @throws {TypeError} - On different arguments types\r\n   * \r\n   * @return {object} - fridge and shopping creates\r\n   */\r\n    generateLists(ingredientsRecipe, ingredientsQuery){\r\n\r\n        if (ingredientsRecipe.constructor !== Array) throw TypeError(ingredientsRecipe + ' is not an array')\r\n\r\n        if (ingredientsRecipe.length <1) throw Error(ingredientsRecipe + ' cannot be empty')\r\n\r\n        if (ingredientsQuery.constructor !== Array) throw TypeError(ingredientsQuery + ' is not an array')\r\n\r\n        if (ingredientsQuery.length <1) throw Error(ingredientsQuery + ' cannot be empty')\r\n    \r\n        let fridge =[]\r\n        let shopping=[]\r\n\r\n        ingredientsRecipe.forEach(ingredientRecipe=>{\r\n            let compare= ingredientsQuery.find(ingredientQuery=>{\r\n                return ingredientRecipe.toLowerCase().includes(ingredientQuery.toLowerCase()) \r\n            })\r\n            if (compare) fridge.push(ingredientRecipe)\r\n            else(shopping.push(ingredientRecipe))\r\n        })\r\n\r\n        return {fridge, shopping}\r\n    }\r\n}\r\n\r\nexport default logic"]},"metadata":{},"sourceType":"module"}