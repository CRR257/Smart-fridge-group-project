{"ast":null,"code":"'use strict';\n\nvar userApi = {\n  url: 'https://skylabcoders.herokuapp.com/api',\n  register: function register(name, surname, username, password, confirmPassword, gender, birthDate, height, weight, lifeStyle) {\n    if (typeof name !== 'string') throw TypeError(\"\".concat(name, \" is not a string\"));\n    if (!name.trim().length) throw Error('name is empty');\n    if (typeof surname !== 'string') throw TypeError(\"\".concat(surname, \" is not a string\"));\n    if (!surname.trim().length) throw Error('surname is empty');\n    if (typeof username !== 'string') throw TypeError(\"\".concat(username, \" is not a string\"));\n    if (!username.trim().length) throw Error('username is empty');\n    if (typeof password !== 'string') throw TypeError(\"\".concat(password, \" is not a string\"));\n    if (!password.trim().length) throw Error('password is empty');\n    if (typeof confirmPassword !== 'string') throw TypeError(\"\".concat(confirmPassword, \" is not a string\"));\n    if (!confirmPassword.trim().length) throw Error('your password confirmation is empty');\n    if (password !== confirmPassword) throw Error(\"passwords don't match\");\n    if (typeof gender !== 'string') throw TypeError(gender + ' is not a string');\n    if (!gender.trim().length) throw Error('gender is empty');\n    if (typeof birthDate !== 'string') throw TypeError(birthDate + ' is not a string');\n    if (!birthDate.trim().length) throw Error('birthDate is empty');\n    if (typeof height !== 'number') throw TypeError(height + ' is not a number');\n    if (!(50 < height && height < 250)) throw Error(height + ' should be a number between 50 and 230');\n    if (typeof weight !== 'number') throw TypeError(weight + ' is not a number');\n    if (!(20 < weight && weight < 400)) throw Error(weight + ' should be a number between 20 and 400');\n    if (typeof lifeStyle !== 'string') throw TypeError(lifeStyle + ' is not a string');\n    if (!lifeStyle.trim().length) throw Error('lifeStyle cannot be empty');\n    return fetch(\"\".concat(this.url, \"/user\"), {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name,\n        surname: surname,\n        username: username,\n        password: password,\n        gender: gender,\n        birthDate: birthDate,\n        height: height,\n        weight: weight,\n        lifeStyle: lifeStyle\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      var status = response.status;\n      if (status === 'OK') return response.data.id;\n      throw Error(response.error);\n    });\n  },\n  authenticate: function authenticate(username, password) {\n    if (typeof username !== 'string') throw TypeError(\"\".concat(username, \" is not a string\"));\n    if (!username.trim().length) throw Error('username is empty');\n    if (typeof password !== 'string') throw TypeError(\"\".concat(password, \" is not a string\"));\n    if (!password.trim().length) throw Error('password is empty');\n    return fetch(\"\".concat(this.url, \"/auth\"), {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: username,\n        password: password\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      var status = response.status;\n      if (status === 'OK') return response.data;\n      throw Error(response.error);\n    });\n  },\n  retrieve: function retrieve(id, token) {\n    if (typeof id !== 'string') throw TypeError(\"\".concat(id, \" is not a string\"));\n    if (!id.trim().length) throw Error('id is empty');\n    if (!token) throw Error('token is empty');\n    if (typeof token !== 'string') throw TypeError(\"\".concat(token, \" is not a string\"));\n    return fetch(\"\".concat(this.url, \"/user/\").concat(id), {\n      headers: {\n        authorization: \"Bearer \".concat(token)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      var status = response.status;\n      if (status === 'OK') return response.data;\n      throw Error(response.error);\n    });\n  },\n  update: function update(id, token, data) {\n    if (typeof id !== 'string') throw TypeError(\"\".concat(id, \" is not a string\"));\n    if (!id.trim().length) throw Error('id is empty');\n    if (typeof token !== 'string') throw TypeError(\"\".concat(token, \" is not a string\"));\n    if (!token.trim().length) throw Error('token is empty');\n    if (data.constructor !== Object) throw TypeError(\"\".concat(data, \" is not an object\"));\n    return fetch(\"\".concat(this.url, \"/user/\").concat(id), {\n      method: 'PUT',\n      headers: {\n        authorization: \"Bearer \".concat(token),\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      var status = response.status;\n      if (status === 'OK') return;\n      throw Error(response.error);\n    });\n  },\n  remove: function remove(id, token, username, password) {\n    if (typeof id !== 'string') throw TypeError(\"\".concat(id, \" is not a string\"));\n    if (!id.trim().length) throw Error('id is empty');\n    if (typeof token !== 'string') throw TypeError(\"\".concat(token, \" is not a string\"));\n    if (!token.trim().length) throw Error('token is empty');\n    if (typeof username !== 'string') throw TypeError(\"\".concat(username, \" is not a string\"));\n    if (!username.trim().length) throw Error('username is empty');\n    if (typeof password !== 'string') throw TypeError(\"\".concat(password, \" is not a string\"));\n    if (!password.trim().length) throw Error('password is empty');\n    return fetch(\"\".concat(this.url, \"/user/\").concat(id), {\n      method: 'DELETE',\n      headers: {\n        authorization: \"Bearer \".concat(token),\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: username,\n        password: password\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      var status = response.status;\n      if (status === 'OK') return;\n      throw Error(response.error);\n    });\n  }\n};\nexport default userApi;","map":{"version":3,"sources":["C:\\Users\\lluna\\bootcamp\\collab\\los-chicotes\\skylab-bootcamp-201901\\staff\\groups\\null\\smart-fridge\\src\\user-api\\index.js"],"names":["userApi","url","register","name","surname","username","password","confirmPassword","gender","birthDate","height","weight","lifeStyle","TypeError","trim","length","Error","fetch","method","headers","body","JSON","stringify","then","response","json","status","data","id","error","authenticate","retrieve","token","authorization","update","constructor","Object","remove"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nconst userApi = {\r\n    url: 'https://skylabcoders.herokuapp.com/api',\r\n\r\n    register(name, surname, username, password, confirmPassword, gender, birthDate, height, weight, lifeStyle) {\r\n\r\n        if (typeof name !== 'string') throw TypeError(`${name} is not a string`)\r\n        if (!name.trim().length) throw Error('name is empty')\r\n\r\n        if (typeof surname !== 'string') throw TypeError(`${surname} is not a string`)\r\n        if (!surname.trim().length) throw Error('surname is empty')\r\n\r\n        if (typeof username !== 'string') throw TypeError(`${username} is not a string`)\r\n        if (!username.trim().length) throw Error('username is empty')\r\n\r\n        if (typeof password !== 'string') throw TypeError(`${password} is not a string`)\r\n        if (!password.trim().length) throw Error('password is empty')\r\n\r\n        if (typeof confirmPassword !== 'string') throw TypeError(`${confirmPassword} is not a string`)\r\n        if (!confirmPassword.trim().length) throw Error('your password confirmation is empty')\r\n\r\n        if (password !== confirmPassword) throw Error(\"passwords don't match\")\r\n\r\n        if (typeof gender !== 'string') throw TypeError(gender + ' is not a string')\r\n        if (!gender.trim().length) throw Error('gender is empty')\r\n\r\n        if (typeof birthDate !== 'string') throw TypeError(birthDate + ' is not a string')\r\n        if (!birthDate.trim().length) throw Error('birthDate is empty')\r\n\r\n        if (typeof height !== 'number') throw TypeError(height + ' is not a number')\r\n\r\n        if (!(50 < height && height < 250)) throw Error(height + ' should be a number between 50 and 230')\r\n\r\n        if (typeof weight !== 'number') throw TypeError(weight + ' is not a number')\r\n\r\n        if (!(20 < weight && weight < 400)) throw Error(weight + ' should be a number between 20 and 400')\r\n\r\n        if (typeof lifeStyle !== 'string') throw TypeError(lifeStyle + ' is not a string')\r\n        \r\n        if (!lifeStyle.trim().length) throw Error('lifeStyle cannot be empty')\r\n\r\n\r\n        return fetch(`${this.url}/user`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ name, surname, username, password, gender, birthDate, height, weight, lifeStyle })\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                const { status } = response\r\n\r\n                if (status === 'OK') return response.data.id\r\n\r\n                throw Error(response.error)\r\n            })\r\n    },\r\n\r\n    authenticate(username, password) {\r\n        if (typeof username !== 'string') throw TypeError(`${username} is not a string`)\r\n        if (!username.trim().length) throw Error('username is empty')\r\n\r\n        if (typeof password !== 'string') throw TypeError(`${password} is not a string`)\r\n        if (!password.trim().length) throw Error('password is empty')\r\n\r\n        return fetch(`${this.url}/auth`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ username, password })\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                const { status } = response\r\n\r\n                if (status === 'OK') return response.data\r\n\r\n                throw Error(response.error)\r\n            })\r\n    },\r\n\r\n    retrieve(id, token) {\r\n        if (typeof id !== 'string') throw TypeError(`${id} is not a string`)\r\n\r\n        if (!id.trim().length) throw Error('id is empty')\r\n\r\n        if (!token) throw Error('token is empty')\r\n        \r\n        if (typeof token !== 'string') throw TypeError(`${token} is not a string`)\r\n        \r\n\r\n        return fetch(`${this.url}/user/${id}`, {\r\n            headers: {\r\n                authorization: `Bearer ${token}`\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                const { status } = response\r\n\r\n                if (status === 'OK') return response.data\r\n\r\n                throw Error(response.error)\r\n            })\r\n    },\r\n\r\n    update(id, token, data) {\r\n        if (typeof id !== 'string') throw TypeError(`${id} is not a string`)\r\n        if (!id.trim().length) throw Error('id is empty')\r\n\r\n        if (typeof token !== 'string') throw TypeError(`${token} is not a string`)\r\n\r\n        if (!token.trim().length) throw Error('token is empty')\r\n\r\n        if (data.constructor !== Object) throw TypeError(`${data} is not an object`)\r\n\r\n        return fetch(`${this.url}/user/${id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                authorization: `Bearer ${token}`,\r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                const { status } = response\r\n\r\n                if (status === 'OK') return\r\n\r\n                throw Error(response.error)\r\n            })\r\n    },\r\n\r\n    remove(id, token, username, password) {\r\n        if (typeof id !== 'string') throw TypeError(`${id} is not a string`)\r\n        if (!id.trim().length) throw Error('id is empty')\r\n\r\n        if (typeof token !== 'string') throw TypeError(`${token} is not a string`)\r\n\r\n        if (!token.trim().length) throw Error('token is empty')\r\n\r\n        if (typeof username !== 'string') throw TypeError(`${username} is not a string`)\r\n        if (!username.trim().length) throw Error('username is empty')\r\n\r\n        if (typeof password !== 'string') throw TypeError(`${password} is not a string`)\r\n        if (!password.trim().length) throw Error('password is empty')\r\n\r\n        return fetch(`${this.url}/user/${id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                authorization: `Bearer ${token}`,\r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ username, password })\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                const { status } = response\r\n\r\n                if (status === 'OK') return\r\n\r\n                throw Error(response.error)\r\n            })\r\n    }\r\n}\r\n\r\nexport default userApi"]},"metadata":{},"sourceType":"module"}