{"ast":null,"code":"'use strict';\n/**\r\n * \r\n * Edamam API Client.\r\n * \r\n * @version 1.0.0\r\n * \r\n */\n\nvar edamamApi = {\n  url: 'https://api.edamam.com/search',\n  app_id: '8198d034',\n  app_key: 'a306faaee8127f42826feb7eb3083562',\n\n  /**\r\n   * \r\n   * Searches for recipes with the desired query.\r\n   * \r\n   * @param {string} query \r\n   * @param {number} calA \r\n   * @param {number} calB \r\n   * @param {string} diet \r\n   * @param {string} health \r\n   * \r\n   * @throws {Error} - On non-existing required params\r\n   * @throws {TypeError} - On query data type different than string\r\n   */\n  search: function search(query, calA, calB, diet, health) {\n    if (typeof query !== 'string') throw TypeError(\"\".concat(query, \" is not a string\"));\n    if (!query.trim().length) throw Error('query is empty');\n    calA = typeof calA === 'number' ? calA : false;\n    calB = typeof calB === 'number' ? calB : false;\n    var calories = calA && calB ? \"&calories=\".concat(calA, \"-\").concat(calB) : '';\n    diet = typeof diet === 'string' ? \"&diet=\".concat(diet) : '';\n    health = typeof health === 'string' ? \"&health=\".concat(health) : '';\n    return fetch(\"\".concat(this.url, \"?q=\").concat(query, \"&app_id=\").concat(this.app_id, \"&app_key=\").concat(this.app_key, \"&from=0&to=3\").concat(calories).concat(diet).concat(health), {\n      method: 'GET'\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error.message);\n      var hits = response.hits;\n      return hits;\n    });\n  }\n};\nexport default edamamApi;","map":{"version":3,"sources":["C:\\Users\\lluna\\bootcamp\\collab\\los-chicotes\\skylab-bootcamp-201901\\staff\\groups\\null\\smart-fridge\\src\\edamam-api\\index.js"],"names":["edamamApi","url","app_id","app_key","search","query","calA","calB","diet","health","TypeError","trim","length","Error","calories","fetch","method","then","response","json","error","message","hits"],"mappings":"AAAA;AACA;;;;;;;;AAOA,IAAMA,SAAS,GAAG;AACdC,EAAAA,GAAG,EAAE,+BADS;AAEdC,EAAAA,MAAM,EAAE,UAFM;AAGdC,EAAAA,OAAO,EAAE,kCAHK;;AAId;;;;;;;;;;;;;AAaAC,EAAAA,MAjBc,kBAiBPC,KAjBO,EAiBAC,IAjBA,EAiBMC,IAjBN,EAiBYC,IAjBZ,EAiBkBC,MAjBlB,EAiB0B;AAEpC,QAAI,OAAOJ,KAAP,KAAiB,QAArB,EAA+B,MAAMK,SAAS,WAAIL,KAAJ,sBAAf;AAE/B,QAAI,CAACA,KAAK,CAACM,IAAN,GAAaC,MAAlB,EAA0B,MAAMC,KAAK,CAAC,gBAAD,CAAX;AAG1BP,IAAAA,IAAI,GAAG,OAAOA,IAAP,KAAgB,QAAhB,GAA0BA,IAA1B,GAAiC,KAAxC;AACAC,IAAAA,IAAI,GAAG,OAAOA,IAAP,KAAgB,QAAhB,GAA0BA,IAA1B,GAAiC,KAAxC;AACA,QAAIO,QAAQ,GAAGR,IAAI,IAAIC,IAAR,uBAA2BD,IAA3B,cAAmCC,IAAnC,IAA4C,EAA3D;AACAC,IAAAA,IAAI,GAAG,OAAOA,IAAP,KAAgB,QAAhB,mBAAmCA,IAAnC,IAA4C,EAAnD;AACAC,IAAAA,MAAM,GAAG,OAAOA,MAAP,KAAkB,QAAlB,qBAAuCA,MAAvC,IAAkD,EAA3D;AAEA,WAAOM,KAAK,WAAI,KAAKd,GAAT,gBAAkBI,KAAlB,qBAAkC,KAAKH,MAAvC,sBAAyD,KAAKC,OAA9D,yBAAoFW,QAApF,SAA+FN,IAA/F,SAAsGC,MAAtG,GAAgH;AACxHO,MAAAA,MAAM,EAAE;AADgH,KAAhH,CAAL,CAGFC,IAHE,CAGG,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,KAHX,EAIFF,IAJE,CAIG,UAAAC,QAAQ,EAAI;AACd,UAAIA,QAAQ,CAACE,KAAb,EAAoB,MAAMP,KAAK,CAACK,QAAQ,CAACE,KAAT,CAAeC,OAAhB,CAAX;AADN,UAGNC,IAHM,GAGGJ,QAHH,CAGNI,IAHM;AAKd,aAAOA,IAAP;AAEH,KAXE,CAAP;AAYH;AA1Ca,CAAlB;AA6CA,eAAetB,SAAf","sourcesContent":["'use strict'\r\n/**\r\n * \r\n * Edamam API Client.\r\n * \r\n * @version 1.0.0\r\n * \r\n */\r\nconst edamamApi = {\r\n    url: 'https://api.edamam.com/search',\r\n    app_id: '8198d034',\r\n    app_key: 'a306faaee8127f42826feb7eb3083562',\r\n    /**\r\n     * \r\n     * Searches for recipes with the desired query.\r\n     * \r\n     * @param {string} query \r\n     * @param {number} calA \r\n     * @param {number} calB \r\n     * @param {string} diet \r\n     * @param {string} health \r\n     * \r\n     * @throws {Error} - On non-existing required params\r\n     * @throws {TypeError} - On query data type different than string\r\n     */\r\n    search(query, calA, calB, diet, health) {\r\n        \r\n        if (typeof query !== 'string') throw TypeError(`${query} is not a string`)\r\n\r\n        if (!query.trim().length) throw Error('query is empty')\r\n\r\n\r\n        calA = typeof calA === 'number'? calA : false\r\n        calB = typeof calB === 'number'? calB : false\r\n        let calories = calA && calB? `&calories=${calA}-${calB}` : ''\r\n        diet = typeof diet === 'string'? `&diet=${diet}` : ''\r\n        health = typeof health === 'string'? `&health=${health}` : ''\r\n\r\n        return fetch(`${this.url}?q=${query}&app_id=${this.app_id}&app_key=${this.app_key}&from=0&to=3${calories}${diet}${health}`, {\r\n            method: 'GET'\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error.message)\r\n\r\n                const { hits } = response\r\n\r\n                return hits\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport default edamamApi"]},"metadata":{},"sourceType":"module"}