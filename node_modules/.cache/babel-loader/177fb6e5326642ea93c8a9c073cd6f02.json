{"ast":null,"code":"import userApi from '../user-api';\nimport edamamApi from '../edamam-api';\n/**\r\n * Logic for the smart-fridge app\r\n */\n\nvar logic = {\n  /**\r\n   * Calculate the total amount of daily calories that the user needs based on his params.\r\n   *\r\n   * @param {string} gender\r\n   * @param {number} height - cm\r\n   * @param {number} weight - Kg\r\n   * @param {string} birthYear - Y/M/D\r\n   * @param {string} lifeStyle\r\n   * \r\n   * @throws {Error} - On empty values\r\n   * @throws {TypeError} - On different data types\r\n   *\r\n   */\n  caloriesCounter: function caloriesCounter(gender, height, weight, birthdateString, lifeStyle) {\n    var birthdate = new Date(birthdateString);\n    var cur = new Date();\n    var diff = cur - birthdate; // This is the difference in milliseconds\n\n    var age = Math.floor(diff / 31557600000);\n    if (typeof gender !== 'string') throw TypeError(gender + ' is not a string');\n    if (!gender.trim().length) throw Error('gender cannot be empty');\n    if (typeof height !== 'number') throw TypeError(height + ' is not a number');\n    if (!(50 < height && height < 250)) throw Error(height + ' should be a number between 50 and 230');\n    if (typeof weight !== 'number') throw TypeError(weight + ' is not a number');\n    if (!(20 < weight && weight < 400)) throw Error(weight + ' should be a number between 20 and 400');\n    if (typeof birthdateString !== 'string') throw TypeError(birthdateString + ' is not a string');\n    if (!birthdateString.trim().length) throw Error('birthDate cannot be empty');\n    if (typeof age !== 'number') throw TypeError(age + ' is not a number');\n    if (!(15 < age && age < 120)) throw Error(age + ' must be between 15 and 120');\n    if (typeof lifeStyle !== 'string') throw TypeError(lifeStyle + ' is not a string');\n    if (!lifeStyle.trim().length) throw Error('lifeStyle cannot be empty');\n    var totalCalories;\n\n    if (gender === \"male\") {\n      var bmr = 10 * weight + 6.25 * height - 5 * age + 5;\n\n      if (lifeStyle === \"sedentary\") {\n        totalCalories = bmr * 1.53;\n      } else if (lifeStyle === \"active\") {\n        totalCalories = bmr * 1.76;\n      } else {\n        totalCalories = bmr * 2.25;\n      }\n    } else if (gender === \"female\") {\n      var _bmr = 10 * weight + 6.25 * height - 5 * age - 161;\n\n      if (lifeStyle === \"sedentary\") {\n        totalCalories = _bmr * 1.53;\n      } else if (lifeStyle === \"active\") {\n        totalCalories = _bmr * 1.76;\n      } else {\n        totalCalories = _bmr * 2.25;\n      }\n    }\n\n    return Math.floor(Math.round(totalCalories));\n  },\n\n  /**\r\n   * \r\n   * Registers a user.\r\n   * \r\n   * @param {string} name \r\n   * @param {string} surname \r\n   * @param {string} username \r\n   * @param {string} password \r\n   * @param {string} passwordConfirm \r\n   * @param {string} gender \r\n   * @param {number} height \r\n   * @param {number} weight \r\n   * @param {string} birthDate \r\n   * @param {string} lifeStyle \r\n   * \r\n   * @throws {Error} - When length of arguments differs from 10\r\n   */\n  register: function register(name, surname, username, password, passwordConfirm, gender, height, weight, birthDate, lifeStyle) {\n    if (arguments.length < 10) throw Error('All arguments were not introduced in the function');\n    if (arguments.length > 10) throw Error('Too many arguments were introduced in the function');\n    return userApi.register(name, surname, username, password, passwordConfirm, gender, birthDate, height, weight, lifeStyle);\n  },\n\n  /**\r\n   * \r\n   * Logs In a user.\r\n   * \r\n   * @param {string} email \r\n   * @param {string} password \r\n   * \r\n   * @throws {Error} - When length of arguments differs from 2\r\n   */\n  login: function login(email, password) {\n    if (arguments.length < 2) throw Error('All arguments were not introduced in the function');\n    if (arguments.length > 2) throw Error('Too many arguments were introduced in the function');\n    return userApi.authenticate(email, password);\n  },\n\n  /**\r\n   * \r\n   * Retrieves data of a user.\r\n   * \r\n   * @param {string} id \r\n   * @param {string} token \r\n   * \r\n   * @throws {Error} - When length of arguments differs from 2\r\n   */\n  retrieve: function retrieve(id, token) {\n    if (arguments.length < 2) throw Error('All arguments were not introduced in the function');\n    if (arguments.length > 2) throw Error('Too many arguments were introduced in the function');\n    return userApi.retrieve(id, token);\n  },\n\n  /**\r\n   * \r\n   * Updates user information.\r\n   * \r\n   * @param {string} id \r\n   * @param {string} token \r\n   * @param {object} data \r\n   * \r\n   * @throws {Error} - When length of arguments differs from 3\r\n   */\n  update: function update(id, token, data) {\n    if (arguments.length < 3) throw Error('All arguments were not introduced in the function');\n    if (arguments.length > 3) throw Error('Too many arguments were introduced in the function');\n    return userApi.update(id, token, data);\n  },\n\n  /**\r\n   * \r\n   * Removes a user from the database.\r\n   * \r\n   * @param {string} id \r\n   * @param {string} token \r\n   * @param {string} username \r\n   * @param {string} password \r\n   * \r\n   * @throws {Error} - When length of arguments differs from 4\r\n   */\n  remove: function remove(id, token, username, password) {\n    if (arguments.length < 4) throw Error('All arguments were not introduced in the function');\n    if (arguments.length > 4) throw Error('Too many arguments were introduced in the function');\n    return userApi.remove(id, token, username, password);\n  },\n\n  /**\r\n   * \r\n   * Searches for recipes with the desired query.\r\n   * \r\n   * @param {string} query \r\n   * @param {string} calories\r\n   * @param {string} diet \r\n   * @param {Array} healthArray\r\n   * \r\n   * @throws {Error} - On non-existing required params\r\n   * @throws {TypeError} - On query data type different than string\r\n   */\n  search: function search(query, calories, diet, healthArray) {\n    if (calories === undefined) throw Error('Calories range was not input');\n    if (typeof calories !== 'string') throw TypeError(calories + ' is not a string');\n    var myDiet;\n\n    if (diet) {\n      if (typeof diet !== 'string') throw TypeError(diet + ' is not a string');else if (diet === 'indifferent') {\n        myDiet = '';\n      } else {\n        myDiet = '&diet=' + diet;\n      }\n    }\n\n    var health;\n\n    if (healthArray.length > 0 || healthArray.length === undefined) {\n      if (!(healthArray instanceof Array)) throw TypeError(healthArray + ' is not an array');\n      var res = [];\n      healthArray.forEach(function (element) {\n        res.push('&health=' + element);\n      });\n      health = res.join('');\n    } else {\n      health = '';\n    }\n\n    var toCalories = '&calories=0-' + calories;\n    return edamamApi.search(query, toCalories, myDiet, health);\n  }\n};\nexport default logic;","map":{"version":3,"sources":["C:\\Users\\lluna\\bootcamp\\collab\\los-chicotes\\skylab-bootcamp-201901\\staff\\groups\\null\\smart-fridge\\src\\logic\\index.js"],"names":["userApi","edamamApi","logic","caloriesCounter","gender","height","weight","birthdateString","lifeStyle","birthdate","Date","cur","diff","age","Math","floor","TypeError","trim","length","Error","totalCalories","bmr","round","register","name","surname","username","password","passwordConfirm","birthDate","arguments","login","email","authenticate","retrieve","id","token","update","data","remove","search","query","calories","diet","healthArray","undefined","myDiet","health","Array","res","forEach","element","push","join","toCalories"],"mappings":"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","sourcesContent":["import userApi from '../user-api'\r\nimport edamamApi from '../edamam-api'\r\n/**\r\n * Logic for the smart-fridge app\r\n */\r\nconst logic = {\r\n    /**\r\n     * Calculate the total amount of daily calories that the user needs based on his params.\r\n     *\r\n     * @param {string} gender\r\n     * @param {number} height - cm\r\n     * @param {number} weight - Kg\r\n     * @param {string} birthYear - Y/M/D\r\n     * @param {string} lifeStyle\r\n     * \r\n     * @throws {Error} - On empty values\r\n     * @throws {TypeError} - On different data types\r\n     *\r\n     */\r\n    caloriesCounter(gender, height, weight, birthdateString, lifeStyle) { \r\n\r\n        const birthdate = new Date(birthdateString);\r\n        const cur = new Date();\r\n        const diff = cur-birthdate; // This is the difference in milliseconds\r\n        const age = Math.floor(diff/31557600000); \r\n\r\n        if (typeof gender !== 'string') throw TypeError(gender + ' is not a string')\r\n\r\n        if (!gender.trim().length) throw Error('gender cannot be empty')\r\n\r\n        if (typeof height !== 'number') throw TypeError(height + ' is not a number')\r\n\r\n        if (!(50 < height && height < 250)) throw Error(height + ' should be a number between 50 and 230')\r\n\r\n        if (typeof weight !== 'number') throw TypeError(weight + ' is not a number')\r\n\r\n        if (!(20 < weight && weight < 400)) throw Error(weight + ' should be a number between 20 and 400')\r\n \r\n        if (typeof birthdateString !== 'string') throw TypeError(birthdateString + ' is not a string')\r\n        \r\n        if (!birthdateString.trim().length) throw Error('birthDate cannot be empty')\r\n        \r\n        if (typeof age !== 'number') throw TypeError(age + ' is not a number')\r\n\r\n        if (!(15 < age && age < 120)) throw Error(age + ' must be between 15 and 120')\r\n        \r\n        if (typeof lifeStyle !== 'string') throw TypeError(lifeStyle + ' is not a string')\r\n        \r\n        if (!lifeStyle.trim().length) throw Error('lifeStyle cannot be empty')\r\n        \r\n\r\n        var totalCalories\r\n        \r\n        if(gender === \"male\"){\r\n            const bmr =  (10 * weight) + (6.25 * height) - (5 * age) + 5\r\n            \r\n            if(lifeStyle === \"sedentary\"){\r\n                totalCalories =  bmr * 1.53\r\n\r\n            }else if(lifeStyle === \"active\"){\r\n\r\n                totalCalories =  bmr * 1.76\r\n\r\n            }else{\r\n                totalCalories =  bmr * 2.25\r\n            }\r\n\r\n        }else if(gender === \"female\") {\r\n            const bmr = (10 * weight) + (6.25 * height) - (5 * age) - 161\r\n\r\n            if(lifeStyle === \"sedentary\"){\r\n\r\n                totalCalories =  bmr * 1.53\r\n\r\n            }else if(lifeStyle === \"active\"){\r\n                totalCalories =  bmr * 1.76\r\n\r\n            }else{\r\n                totalCalories =  bmr * 2.25\r\n            }\r\n        }    \r\n        return Math.floor(Math.round(totalCalories)) \r\n    },\r\n    /**\r\n     * \r\n     * Registers a user.\r\n     * \r\n     * @param {string} name \r\n     * @param {string} surname \r\n     * @param {string} username \r\n     * @param {string} password \r\n     * @param {string} passwordConfirm \r\n     * @param {string} gender \r\n     * @param {number} height \r\n     * @param {number} weight \r\n     * @param {string} birthDate \r\n     * @param {string} lifeStyle \r\n     * \r\n     * @throws {Error} - When length of arguments differs from 10\r\n     */\r\n    register(name, surname, username, password, passwordConfirm, gender, height, weight, birthDate, lifeStyle) {\r\n\r\n        if (arguments.length < 10) throw Error('All arguments were not introduced in the function')\r\n\r\n        if (arguments.length > 10) throw Error('Too many arguments were introduced in the function')\r\n\r\n        return userApi.register(name, surname, username, password, passwordConfirm, gender, birthDate, height, weight, lifeStyle)\r\n    },\r\n    /**\r\n     * \r\n     * Logs In a user.\r\n     * \r\n     * @param {string} email \r\n     * @param {string} password \r\n     * \r\n     * @throws {Error} - When length of arguments differs from 2\r\n     */\r\n    login(email, password) {\r\n\r\n        if (arguments.length < 2) throw Error('All arguments were not introduced in the function')\r\n\r\n        if (arguments.length > 2) throw Error('Too many arguments were introduced in the function')\r\n\r\n        return userApi.authenticate(email, password)\r\n    },\r\n    /**\r\n     * \r\n     * Retrieves data of a user.\r\n     * \r\n     * @param {string} id \r\n     * @param {string} token \r\n     * \r\n     * @throws {Error} - When length of arguments differs from 2\r\n     */\r\n    retrieve(id, token) {\r\n\r\n        if (arguments.length < 2) throw Error('All arguments were not introduced in the function')\r\n\r\n        if (arguments.length > 2) throw Error('Too many arguments were introduced in the function')\r\n\r\n        return userApi.retrieve(id, token)\r\n    },\r\n    /**\r\n     * \r\n     * Updates user information.\r\n     * \r\n     * @param {string} id \r\n     * @param {string} token \r\n     * @param {object} data \r\n     * \r\n     * @throws {Error} - When length of arguments differs from 3\r\n     */\r\n    update(id, token, data) {\r\n        if (arguments.length < 3) throw Error('All arguments were not introduced in the function')\r\n\r\n        if (arguments.length > 3) throw Error('Too many arguments were introduced in the function')\r\n\r\n        return userApi.update(id, token, data)\r\n    },\r\n    /**\r\n     * \r\n     * Removes a user from the database.\r\n     * \r\n     * @param {string} id \r\n     * @param {string} token \r\n     * @param {string} username \r\n     * @param {string} password \r\n     * \r\n     * @throws {Error} - When length of arguments differs from 4\r\n     */\r\n    remove(id, token, username, password) {\r\n        if (arguments.length < 4) throw Error('All arguments were not introduced in the function')\r\n\r\n        if (arguments.length > 4) throw Error('Too many arguments were introduced in the function')\r\n\r\n        return userApi.remove(id, token, username, password)\r\n    }, \r\n    /**\r\n     * \r\n     * Searches for recipes with the desired query.\r\n     * \r\n     * @param {string} query \r\n     * @param {string} calories\r\n     * @param {string} diet \r\n     * @param {Array} healthArray\r\n     * \r\n     * @throws {Error} - On non-existing required params\r\n     * @throws {TypeError} - On query data type different than string\r\n     */\r\n    search(query, calories, diet, healthArray) {\r\n\r\n        \r\n        if (calories === undefined) throw Error('Calories range was not input')\r\n        \r\n        if (typeof calories !== 'string') throw TypeError(calories + ' is not a string')\r\n\r\n        let myDiet\r\n        \r\n        if (diet) {\r\n            if (typeof diet !== 'string') throw TypeError(diet + ' is not a string')\r\n\r\n            else if (diet === 'indifferent') {\r\n                myDiet = ''\r\n            } else {\r\n                myDiet = '&diet=' + diet\r\n            }\r\n        }\r\n        \r\n        let health\r\n\r\n        if (healthArray.length > 0 || healthArray.length === undefined) {\r\n            if (!(healthArray instanceof Array)) throw TypeError(healthArray + ' is not an array')\r\n            const res = []\r\n            \r\n            healthArray.forEach(element => {\r\n                res.push('&health=' + element)\r\n            });\r\n            \r\n            health = res.join('')\r\n        } else {\r\n            health = ''\r\n        }\r\n        \r\n        const toCalories = '&calories=0-' + calories\r\n\r\n        return edamamApi.search(query, toCalories, myDiet, health)\r\n    }\r\n}\r\n\r\nexport default logic"]},"metadata":{},"sourceType":"module"}