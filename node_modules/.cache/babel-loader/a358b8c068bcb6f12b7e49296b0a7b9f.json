{"ast":null,"code":"'use strict';\n/**\r\n * \r\n * Edamam API Client.\r\n * \r\n * @version 1.0.0\r\n * \r\n */\n\nvar edamamApi = {\n  url: 'https://api.edamam.com/search',\n  app_id: '8198d034',\n  app_key: 'a306faaee8127f42826feb7eb3083562',\n\n  /**\r\n   * \r\n   * Searches for recipes with the desired query.\r\n   * \r\n   * @param {string} query \r\n   * @param {string} calories\r\n   * @param {string} diet \r\n   * @param {string} health \r\n   * \r\n   * @throws {Error} - On non-existing required params\r\n   * @throws {TypeError} - On query data type different than string\r\n   */\n  search: function search(query, calories, diet, health) {\n    if (typeof query !== 'string') throw TypeError(\"\".concat(query, \" is not a string\"));\n    if (!query.trim().length) throw Error('query is empty');\n    if (typeof calories !== 'string') throw TypeError(\"\".concat(calories, \" is not a string\"));\n    if (!calories.trim().length) throw Error('calories is empty');\n    diet = typeof diet === 'string' ? \"\".concat(diet) : '';\n    health = typeof health === 'string' ? \"\".concat(health) : '';\n    var completeUrl = \"\".concat(this.url, \"?q=\").concat(query, \"&app_id=\").concat(this.app_id, \"&app_key=\").concat(this.app_key, \"&from=0&to=20\").concat(calories).concat(diet).concat(health);\n    return fetch(completeUrl, {\n      method: 'GET'\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error.message);\n      if (response.count === 0) throw Error('No results found');\n      var hits = response.hits;\n      return hits;\n    });\n  }\n};\nexport default edamamApi;","map":{"version":3,"sources":["C:\\Users\\lluna\\bootcamp\\collab\\los-chicotes\\skylab-bootcamp-201901\\staff\\groups\\null\\smart-fridge\\src\\edamam-api\\index.js"],"names":["edamamApi","url","app_id","app_key","search","query","calories","diet","health","TypeError","trim","length","Error","completeUrl","fetch","method","then","response","json","error","message","count","hits"],"mappings":"AAAA;AACA;;;;;;;;AAOA,IAAMA,SAAS,GAAG;AACdC,EAAAA,GAAG,EAAE,+BADS;AAEdC,EAAAA,MAAM,EAAE,UAFM;AAGdC,EAAAA,OAAO,EAAE,kCAHK;;AAId;;;;;;;;;;;;AAYAC,EAAAA,MAhBc,kBAgBPC,KAhBO,EAgBAC,QAhBA,EAgBUC,IAhBV,EAgBgBC,MAhBhB,EAgBwB;AAElC,QAAI,OAAOH,KAAP,KAAiB,QAArB,EAA+B,MAAMI,SAAS,WAAIJ,KAAJ,sBAAf;AAE/B,QAAI,CAACA,KAAK,CAACK,IAAN,GAAaC,MAAlB,EAA0B,MAAMC,KAAK,CAAC,gBAAD,CAAX;AAE1B,QAAI,OAAON,QAAP,KAAoB,QAAxB,EAAiC,MAAMG,SAAS,WAAIH,QAAJ,sBAAf;AAEjC,QAAI,CAACA,QAAQ,CAACI,IAAT,GAAgBC,MAArB,EAA6B,MAAMC,KAAK,CAAC,mBAAD,CAAX;AAE7BL,IAAAA,IAAI,GAAG,OAAOA,IAAP,KAAgB,QAAhB,aAA6BA,IAA7B,IAAsC,EAA7C;AACAC,IAAAA,MAAM,GAAG,OAAOA,MAAP,KAAkB,QAAlB,aAA+BA,MAA/B,IAA0C,EAAnD;AAEA,QAAIK,WAAW,aAAM,KAAKZ,GAAX,gBAAoBI,KAApB,qBAAoC,KAAKH,MAAzC,sBAA2D,KAAKC,OAAhE,0BAAuFG,QAAvF,SAAkGC,IAAlG,SAAyGC,MAAzG,CAAf;AAEA,WAAOM,KAAK,CAACD,WAAD,EAAc;AACtBE,MAAAA,MAAM,EAAE;AADc,KAAd,CAAL,CAGFC,IAHE,CAGG,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,KAHX,EAIFF,IAJE,CAIG,UAAAC,QAAQ,EAAI;AACd,UAAIA,QAAQ,CAACE,KAAb,EAAoB,MAAMP,KAAK,CAACK,QAAQ,CAACE,KAAT,CAAeC,OAAhB,CAAX;AACpB,UAAIH,QAAQ,CAACI,KAAT,KAAmB,CAAvB,EAA0B,MAAMT,KAAK,CAAC,kBAAD,CAAX;AAFZ,UAINU,IAJM,GAIGL,QAJH,CAINK,IAJM;AAMd,aAAOA,IAAP;AAEH,KAZE,CAAP;AAaH;AA5Ca,CAAlB;AA+CA,eAAetB,SAAf","sourcesContent":["'use strict'\r\n/**\r\n * \r\n * Edamam API Client.\r\n * \r\n * @version 1.0.0\r\n * \r\n */\r\nconst edamamApi = {\r\n    url: 'https://api.edamam.com/search',\r\n    app_id: '8198d034',\r\n    app_key: 'a306faaee8127f42826feb7eb3083562',\r\n    /**\r\n     * \r\n     * Searches for recipes with the desired query.\r\n     * \r\n     * @param {string} query \r\n     * @param {string} calories\r\n     * @param {string} diet \r\n     * @param {string} health \r\n     * \r\n     * @throws {Error} - On non-existing required params\r\n     * @throws {TypeError} - On query data type different than string\r\n     */\r\n    search(query, calories, diet, health) {\r\n        \r\n        if (typeof query !== 'string') throw TypeError(`${query} is not a string`)\r\n\r\n        if (!query.trim().length) throw Error('query is empty')\r\n\r\n        if (typeof calories !== 'string')throw TypeError(`${calories} is not a string`)\r\n\r\n        if (!calories.trim().length) throw Error('calories is empty')\r\n\r\n        diet = typeof diet === 'string'? `${diet}` : ''\r\n        health = typeof health === 'string'? `${health}` : ''\r\n\r\n        let completeUrl = `${this.url}?q=${query}&app_id=${this.app_id}&app_key=${this.app_key}&from=0&to=20${calories}${diet}${health}`\r\n\r\n        return fetch(completeUrl, {\r\n            method: 'GET'\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error.message)\r\n                if (response.count === 0) throw Error('No results found')\r\n\r\n                const { hits } = response\r\n\r\n                return hits\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport default edamamApi"]},"metadata":{},"sourceType":"module"}